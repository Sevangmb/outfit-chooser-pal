import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { temperature, weatherDescription, conditions } = await req.json();
    
    console.log('Generating outfit suggestion for:', { temperature, weatherDescription, conditions });

    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY is not configured');
    }

    let specificAdvice = '';
    if (conditions?.includes('rain')) {
      specificAdvice = 'Inclure un imperméable ou un parapluie est essentiel. ';
    }
    if (temperature < 15) {
      specificAdvice += 'La température étant fraîche, prévoyez des couches chaudes. ';
    }
    if (conditions?.includes('snow')) {
      specificAdvice += 'Des bottes imperméables et chaudes sont recommandées. ';
    }

    const prompt = `En tant que conseiller en mode, suggère une tenue appropriée pour aujourd'hui avec ces conditions météo:
    - Température: ${temperature}°C
    - Conditions: ${weatherDescription}
    
    ${specificAdvice}
    
    Donne une suggestion courte et précise de tenue, en 2-3 phrases maximum. Concentre-toi sur les vêtements essentiels et le style général.`;

    const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': geminiApiKey,
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', errorText);
      throw new Error(`Gemini API returned status ${response.status}`);
    }

    const data = await response.json();
    console.log('Gemini API response:', data);

    if (!data.candidates || !Array.isArray(data.candidates) || data.candidates.length === 0) {
      throw new Error('No suggestion generated by Gemini API');
    }

    const firstCandidate = data.candidates[0];
    if (!firstCandidate?.content?.parts?.[0]?.text) {
      throw new Error('Invalid response format from Gemini API');
    }

    const suggestion = firstCandidate.content.parts[0].text;
    return new Response(JSON.stringify({ suggestion }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in suggest-outfit function:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: error instanceof Error ? error.stack : undefined
      }), 
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});